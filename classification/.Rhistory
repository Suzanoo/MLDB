glm.fit <- model_fit(label = 'GLM', formula, Smarket, train)
summ('GLM', glm.fit)
summ <- function(label, model){
if(label == 'GLM'){
summary(model)
}else if(label == 'LDA'){
model
}else{
NULL
}
}
summ('GLM', glm.fit)
model_predict <- function(label, model, new_data, y_test){
if(label == 'GLM'){
print(paste0("I am in GLM predict"))
probability <- predict(model,
new_data,
type="response")
levels <- unique(y_test)# %>% as.factor()
y_pred <- rep(levels[1], length(probability))
y_pred[probability < 0.5] = levels[2]
y_pred
}
else if(label == 'LDA'){
print(paste0("I am in LDA predict"))
lda.fit.pred <- predict(model, new_data, type="response")
lda.fit.pred$class
}else{
print(paste0("I am in NULL block"))
NULL
}
}
glm.probs <- predict('GLM', glm.fit, Smarket.2005, Direction.2005)
glm.probs <- model_predict('GLM', glm.fit, Smarket.2005, Direction.2005)
glm.pred <- model_predict('GLM', glm.fit, Smarket.2005, Direction.2005) #y_predict
lda.fit <- model_fit(label = 'LDA', formula, Smarket, train)
lda.fit = MASS::lda(Direction ~ Lag1+ Lag2, data = Smarket, subset = train)
model_fit <- function(label, formula, data, subset){
# Logistic Regression
if (label == 'GLM'){
glm(formula = as.formula(paste0(formula)),
data = data,
family = binomial,
subset = subset)
}else if(label == 'LDA'){
MASS::lda(as.formula(paste0(formula)), data, subset)
}else{
NULL
}
}
lda.fit <- model_fit(label = 'LDA', formula, Smarket, train)
?MASS::lda
model_fit <- function(label, formula, data, subset){
# Logistic Regression
if (label == 'GLM'){
glm(formula = as.formula(paste0(formula)),
data = data,
family = binomial,
subset = subset)
}else if(label == 'LDA'){
MASS::lda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else{
NULL
}
}
lda.fit <- model_fit(label = 'LDA', formula, Smarket, train)
summ(lda.fit)
summ('LDA', lda.fit)
lda.pred <- model_predict('LDA', lda.fit, Smarket.2005, Direction.2005)
cfm <- caret::confusionMatrix(lda.pred , Direction.2005)
ggplotConfusionMatrix(cfm)
cfm <- caret::confusionMatrix(glm.pred , Direction.2005)
ggplotConfusionMatrix(cfm)
Xi <- c('Lag1', 'Lag2')
model_plot <- function(label, Xi, data, model, y_test, y_pred){
data <- data %>%
mutate(Class = y_pred) %>%
select(matches(Xi[1]), matches(Xi[2]), Class)
names(test_data) <- c('x', 'y', 'Class')
# create dummy data
dummy <- dummy(label, Xi, data, model, y_test)
# plot graph
ggplot()+
geom_point(data = data, #plot
aes(x = x, y = y,
shape = Class, color = Class,
size = 0.01))+
geom_point(data = dummy, #plot dummy
aes(x = x, y = y,
shape = 'circle', color = Class, alpha = 0.01))+
ggtitle("GLM fit")+
labs(y= Xi[2], x = Xi[1])+
theme(legend.position = "none")
}
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()
min <- data %>% select(x) %>% min() %>% floor()
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
model_plot('GLM', Xi, Smarket.2005, glm.fit, Direction.2005, glm.pred )
model_plot <- function(label, Xi, data, model, y_test, y_pred){
data <- data %>%
mutate(Class = y_pred) %>%
select(matches(Xi[1]), matches(Xi[2]), Class)
names(data) <- c('x', 'y', 'Class')
# create dummy data
dummy <- dummy(label, Xi, data, model, y_test)
# plot graph
ggplot()+
geom_point(data = data, #plot
aes(x = x, y = y,
shape = Class, color = Class,
size = 0.01))+
geom_point(data = dummy, #plot dummy
aes(x = x, y = y,
shape = 'circle', color = Class, alpha = 0.01))+
ggtitle("GLM fit")+
labs(y= Xi[2], x = Xi[1])+
theme(legend.position = "none")
}
model_plot('GLM', Xi, Smarket.2005, glm.fit, Direction.2005, glm.pred )
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()*1.5
min <- data %>% select(x) %>% min() %>% floor()*1.5
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
model_plot('GLM', Xi, Smarket.2005, glm.fit, Direction.2005, glm.pred )
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()*2
min <- data %>% select(x) %>% min() %>% floor()*2
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
model_plot('GLM', Xi, Smarket.2005, glm.fit, Direction.2005, glm.pred )
model_plot('LDA', Xi, Smarket.2005, lda.fit, Direction.2005, lda.pred)
runApp()
##Function to plot confusion matrix
ggplotConfusionMatrix <- function(m){
mytitle <- paste("Accuracy", scales::percent_format()(m$overall[1]),
"Kappa", scales::percent_format()(m$overall[2]))
p <- ggplot(data = as.data.frame(m$table) ,
aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = log(Freq)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Reference, y = Prediction, label = Freq)) +
theme(legend.position = "none") +
ggtitle(mytitle)
p
}
###-----------------------------------------
## Function to create dummy data for plot.
## We create 1000 dummy point and plot them to visual classification anatomy.
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()*2
min <- data %>% select(x) %>% min() %>% floor()*2
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
###-----------------------------------------
##Function to render logistic regression
model_plot <- function(label, Xi, data, model, y_test, y_pred){
data <- data %>%
mutate(Class = y_pred) %>%
select(matches(Xi[1]), matches(Xi[2]), Class)
names(data) <- c('x', 'y', 'Class')
# create dummy data
dummy <- dummy(label, Xi, data, model, y_test)
# plot graph
ggplot()+
geom_point(data = data, #plot
aes(x = x, y = y,
shape = Class, color = Class,
size = 0.01))+
geom_point(data = dummy, #plot dummy
aes(x = x, y = y,
shape = 'circle', color = Class, alpha = 0.01))+
ggtitle(paste0(label, 'Fit'))+
labs(y= Xi[2], x = Xi[1])+
theme(legend.position = "none")
}
###-----------------------------------------
model_fit <- function(label, formula, data, subset){
# Logistic Regression
if (label == 'GLM'){
glm(formula = as.formula(paste0(formula)),
data = data,
family = binomial,
subset = subset)
}else if(label == 'LDA'){
MASS::lda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else{
NULL
}
}
###-----------------------------------------
model_predict <- function(label, model, new_data, y_test){
if(label == 'GLM'){
print(paste0("I am in GLM predict"))
probability <- predict(model,
new_data,
type="response")
levels <- unique(y_test)# %>% as.factor()
y_pred <- rep(levels[1], length(probability))
y_pred[probability < 0.5] = levels[2]
y_pred
}
else if(label == 'LDA'){
print(paste0("I am in LDA predict"))
lda.fit.pred <- predict(model, new_data, type="response")
lda.fit.pred$class
}else{
print(paste0("I am in NULL block"))
NULL
}
}
summ <- function(label, model){
if(label == 'GLM'){
summary(model)
}else if(label == 'LDA'){
model
}else{
NULL
}
}
runApp()
qda.fit <- model_fit(label = 'QDA', formula, Smarket, train)
qda.fit
##Function to plot confusion matrix
ggplotConfusionMatrix <- function(m){
mytitle <- paste("Accuracy", scales::percent_format()(m$overall[1]),
"Kappa", scales::percent_format()(m$overall[2]))
p <- ggplot(data = as.data.frame(m$table) ,
aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = log(Freq)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Reference, y = Prediction, label = Freq)) +
theme(legend.position = "none") +
ggtitle(mytitle)
p
}
###-----------------------------------------
## Function to create dummy data for plot.
## We create 1000 dummy point and plot them to visual classification anatomy.
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()*2
min <- data %>% select(x) %>% min() %>% floor()*2
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
###-----------------------------------------
##Function to render logistic regression
model_plot <- function(label, Xi, data, model, y_test, y_pred){
data <- data %>%
mutate(Class = y_pred) %>%
select(matches(Xi[1]), matches(Xi[2]), Class)
names(data) <- c('x', 'y', 'Class')
# create dummy data
dummy <- dummy(label, Xi, data, model, y_test)
# plot graph
ggplot()+
geom_point(data = data, #plot
aes(x = x, y = y,
shape = Class, color = Class,
size = 0.01))+
geom_point(data = dummy, #plot dummy
aes(x = x, y = y,
shape = 'circle', color = Class, alpha = 0.01))+
ggtitle(paste0(label, ' Fit'))+
labs(y= Xi[2], x = Xi[1])+
theme(legend.position = "none")
}
###-----------------------------------------
model_fit <- function(label, formula, data, subset){
# Logistic Regression
if (label == 'GLM'){
glm(formula = as.formula(paste0(formula)),
data = data,
family = binomial,
subset = subset)
}else if(label == 'LDA'){
MASS::lda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else if(label == 'QDA'){
MASS::qda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else{
NULL
}
}
###-----------------------------------------
model_predict <- function(label, model, new_data, y_test){
if(label == 'GLM'){
print(paste0("I am in GLM predict"))
probability <- predict(model,
new_data,
type="response")
levels <- unique(y_test)# %>% as.factor()
y_pred <- rep(levels[1], length(probability))
y_pred[probability < 0.5] = levels[2]
y_pred
}else if(label == 'LDA'){
print(paste0("I am in LDA predict"))
lda.fit.pred <- predict(model, new_data, type="response")
lda.fit.pred$class
}else if(label == 'QDA'){
print(paste0("I am in QDA predict"))
qda.fit.pred <- predict(model, new_data, type="response")
qda.fit.pred$class
}else{
print(paste0("I am in NULL block"))
NULL
}
}
summ <- function(label, model){
if(label == 'GLM'){
summary(model)
}else if(label == 'LDA'){
model
}else{
NULL
}
}
qda.fit <- model_fit(label = 'QDA', formula, Smarket, train)
qda.fit
##Function to plot confusion matrix
ggplotConfusionMatrix <- function(m){
mytitle <- paste("Accuracy", scales::percent_format()(m$overall[1]),
"Kappa", scales::percent_format()(m$overall[2]))
p <- ggplot(data = as.data.frame(m$table) ,
aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = log(Freq)), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(x = Reference, y = Prediction, label = Freq)) +
theme(legend.position = "none") +
ggtitle(mytitle)
p
}
###-----------------------------------------
## Function to create dummy data for plot.
## We create 1000 dummy point and plot them to visual classification anatomy.
dummy <- function(label, Xi, data, model, y_test){
# x-y boundary
max <- data %>% select(x) %>% max() %>% ceiling()*2
min <- data %>% select(x) %>% min() %>% floor()*2
# uniform random point
set.seed((112))
x_dummy1 <- runif(1000, min, max)
x_dummy2 <- runif(1000, min, max)
# convert to table
new_data <- tibble(x_dummy1, x_dummy2)
names(new_data) <- Xi #call model require original name
# Call glm prediction
y_pred <- model_predict(label, model, new_data, y_test)
# save all into dataframe, ready to plot
dummy <- new_data %>%
bind_cols(y_pred) %>%
set_names(c('x', 'y', 'Class'))
dummy
}
###-----------------------------------------
##Function to render logistic regression
model_plot <- function(label, Xi, data, model, y_test, y_pred){
data <- data %>%
mutate(Class = y_pred) %>%
select(matches(Xi[1]), matches(Xi[2]), Class)
names(data) <- c('x', 'y', 'Class')
# create dummy data
dummy <- dummy(label, Xi, data, model, y_test)
# plot graph
ggplot()+
geom_point(data = data, #plot
aes(x = x, y = y,
shape = Class, color = Class,
size = 0.01))+
geom_point(data = dummy, #plot dummy
aes(x = x, y = y,
shape = 'circle', color = Class, alpha = 0.01))+
ggtitle(paste0(label, ' Fit'))+
labs(y= Xi[2], x = Xi[1])+
theme(legend.position = "none")
}
###-----------------------------------------
model_fit <- function(label, formula, data, subset){
# Logistic Regression
if (label == 'GLM'){
glm(formula = as.formula(paste0(formula)),
data = data,
family = binomial,
subset = subset)
}else if(label == 'LDA'){
MASS::lda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else if(label == 'QDA'){
MASS::qda(formula = as.formula(paste0(formula)),
data = data,
subset = subset)
}else{
NULL
}
}
###-----------------------------------------
model_predict <- function(label, model, new_data, y_test){
if(label == 'GLM'){
print(paste0("I am in GLM predict"))
probability <- predict(model,
new_data,
type="response")
levels <- unique(y_test)# %>% as.factor()
y_pred <- rep(levels[1], length(probability))
y_pred[probability < 0.5] = levels[2]
y_pred
}else if(label == 'LDA'){
print(paste0("I am in LDA predict"))
lda.fit.pred <- predict(model, new_data, type="response")
lda.fit.pred$class
}else if(label == 'QDA'){
print(paste0("I am in QDA predict"))
qda.fit.pred <- predict(model, new_data, type="response")
qda.fit.pred$class
}else{
print(paste0("I am in NULL block"))
NULL
}
}
summ <- function(label, model){
if(label == 'GLM'){
summary(model)
}else if(label == 'LDA' | label == 'QDA'){
model
}else{
NULL
}
}
qda.pred <- model_predict('QDA', qda.fit, Smarket.2005, Direction.2005)
cfm <- caret::confusionMatrix(qda.pred , Direction.2005)
ggplotConfusionMatrix(cfm)
model_plot('QDA', Xi, Smarket.2005, qda.fit, Direction.2005, qda.pred)
runApp()
